<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Vision_DetectBlob" Id="{7d6fbb82-2aa2-4b54-bab5-a2df2c3178f8}" SpecialFunc="None">
    <Declaration><![CDATA[// ブロブ検出処理： ボルト、ワッシャー、ナットを検出する
FUNCTION Vision_DetectBlob : HRESULT

VAR_INPUT
	ipImageIn				: ITcVnImage;					// 入力画像
	ipImageRes				: REFERENCE TO  ITcVnImage;		// 結果画像
	ipImageGray				: REFERENCE TO  ITcVnImage;		// グレー変換画像
	ipImageFillHole			: REFERENCE TO  ITcVnImage;		// 穴埋め画像	
	hrPrev					: HRESULT;						// 直前に実行したVision関数の戻り値
END_VAR

VAR
	hr, hrTemp				: HRESULT;					// 関数戻り値

	stBlobParams			: TcVnParamsBlobDetection;	// Blob params
	ipContourList			: ITcVnContainer;			// Blob Container
	ipContour				: ITcVnContainer;			// Blob個々の輪郭情報
	ipIterator				: ITcVnForwardIterator;		// 個々のBlobが格納されたコンテナから各要素へアクセスする為のイテレータ （≒ポインタ）	
	
	nDetectedNum			: ULINT;					// 検出したブログ数
	fArea					: LREAL;					// 面積 [pixel]
	aMassCenter				: TcVnPoint2_LREAL;			// ブロブの重心座標 (x, y)[pixel]
	
	fbFormatString			: FB_FormatString;			// (need library : "Tc2_Utilities")
	sText					: STRING;
	aDrawPos				: ARRAY[0..1] OF UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*

// --------------------------------------------------------------
// 入力パラメータのチェック
// --------------------------------------------------------------
IF FAILED(hrPrev) THEN
	Vision_DetectBlob := hrPrev;
	RETURN;
END_IF
// VAR_INPUTで渡されたインターフェースポインタの有効性をチェック
IF ipImageIn = 0 THEN
	Vision_DetectBlob := E_HRESULTAdsErr.INVALIDPARM;
	RETURN;
END_IF


// --------------------------------------------------------------
// グレー画像に変換し、ワッシャーやナットの穴を埋める
// --------------------------------------------------------------
hr := F_VN_ConvertColorSpace(ipImageIn, ipImageGray, ETcVnColorSpaceTransform.TCVN_CST_RGB_TO_GRAY, hr);
//hr := F_VN_FillHoles(ipImageGray, ipImageFillHole, hr);

// --------------------------------------------------------------
// ブロブ検出パラメータをセット
// --------------------------------------------------------------
stBlobParams.bFilterByArea := TRUE;
stBlobParams.fMinArea := 100;
stBlobParams.fMaxArea := 1000000;

// 円形度判別
stBlobParams.bFilterByCircularity := TRUE;
stBlobParams.fMinCircularity := 0.80;

// 輝度閾値
stBlobParams.fMinThreshold	:= 30;
stBlobParams.fMaxThreshold := 255;
stBlobParams.fThresholdStep := 0;
//stBlobParams.eThresholdType := ETcVnThresholdType.TCVN_TT_OTSU_BINARY;	// 大津の二値化


// --------------------------------------------------------------
// Detect Blobs
// --------------------------------------------------------------
hr := F_VN_DetectBlobs((*ipImageFillHole*)ipImageGray, ipContourList, stBlobParams, hr);
IF SUCCEEDED(hr) AND ipContourList <> 0 THEN
	hr := ipContourList.GetElementNum(nDetectedNum);	// 検出したブロブ数を取得
END_IF

IF nDetectedNum > 0 THEN
	// 検出したブロブの輪郭を描画
	hr := F_VN_DrawContours(ipContourList, -1, ipImageRes,  Vision.aColorGreen, 3, hr);
	
	// 各ブロブ情報が格納されたコンテナ(ContourList)から、最初の要素へのイテレータを取得
	hr := F_VN_GetForwardIterator(ipContourList, ipIterator, hr);
	
	WHILE SUCCEEDED(hr) AND_THEN ipIterator.CheckIfEnd() <> S_OK DO
		// イテレータが指し示しているContourを取り出す。その後イテレータが次のContourを指し示すよう進める
		hr := F_VN_GetContainer(ipIterator, ipContour, hr);
		hr := F_VN_IncrementIterator(ipIterator, hr);
		
		// Containerから欲しい結果を取得
		hr := F_VN_ContourArea(ipContour, fArea, hr);
		hr := F_VN_ContourCenterOfMass(ipContour, aMassCenter, hr);
		
		// 個々の結果を描画
		aDrawPos[0] := LREAL_TO_UDINT(aMassCenter[0]);
		aDrawPos[1] := LREAL_TO_UDINT(aMassCenter[1]);
		
		// 重心位置をマーク
		hrTemp := F_VN_DrawPointExp(aDrawPos[0], aDrawPos[1], 
									ipImageRes, 
									ETcVnDrawShape.TCVN_DS_PLUS, 
									Vision.aColorGreen, 5, 1, 
									ETcVnLineType.TCVN_LT_4_CONNECTED, 0);
		
		// 面積値を結果画像に対して出力
		sText := CONCAT('Area : ', DINT_TO_STRING(LREAL_TO_DINT(fArea)));
		hrTemp := F_VN_PutText(	sText, 
								ipImageRes, 
								aDrawPos[0] - 50, aDrawPos[1] + 20, 
								ETcVnFontType.TCVN_FT_HERSHEY_TRIPLEX, 1.5, Vision.aColorRed, 0);
		
		// 座標情報を結果画像に対して出力
		fbFormatString(	sFormat := '(X, Y) = (%0.3f, %0.3f)', 
						arg1 := F_LREAL(aMassCenter[0]), arg2 := F_LREAL(aMassCenter[1]), sOut => sText);
		hrTemp := F_VN_PutText(	sText, 
								ipImageRes, 
								aDrawPos[0] - 110, aDrawPos[1] + 80, 
								ETcVnFontType.TCVN_FT_HERSHEY_TRIPLEX, 1.5, Vision.aColorRed, 0);
	END_WHILE
	
	FW_SafeRelease(ADR(ipContour));		// ループの外で開放するほうが効率的なので、ここで開放する
	FW_SafeRelease(ADR(ipIterator));	
END_IF
FW_SafeRelease(ADR(ipContourList));

Vision_DetectBlob := hr;


*)
]]></ST>
    </Implementation>
    <LineIds Name="Vision_DetectBlob">
      <LineId Id="299" Count="1" />
      <LineId Id="288" Count="10" />
      <LineId Id="225" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="144" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="124" Count="2" />
      <LineId Id="136" Count="0" />
      <LineId Id="130" Count="5" />
      <LineId Id="259" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="127" Count="2" />
      <LineId Id="137" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="138" Count="5" />
      <LineId Id="43" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="307" Count="2" />
      <LineId Id="306" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
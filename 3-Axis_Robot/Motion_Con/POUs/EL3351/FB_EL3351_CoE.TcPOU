<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_EL3351_CoE" Id="{5bcb8c5d-2744-482e-820a-c24178fffc4c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EL3351_CoE
VAR CONSTANT
(*+++++ Upper Array Bounds +++++*)
	CnMaxIdxRead: UDINT:= 7;
	CnMaxIdxWrite: UDINT:= 7;
END_VAR
VAR_INPUT
(*+++++ AMS Address for CoE Com +++++*)
	AdsAddr: ST_AmsAddr;
(*+++++ Blinker +++++*)
	bBlinker: BOOL;

	nTerminalNr: UINT;
END_VAR
VAR_OUTPUT
(*+++++ General Status for this Function Block +++++*)
	bCoeAccessOK: BOOL;
	sStatusCoeAccess:STRING(255);
END_VAR
VAR
(*+++++ AMS Address for CoE Com +++++*)
	sAdsAddr: STRING(30);
(*+++++ CoE Index +++++*)
	bCoeBusy: BOOL;
(*+++++ Init +++++*)
	bInitDoneRead: BOOL;
	bInitDoneWrite: BOOL;
	bInitDoneBufLen: BOOL;
	bInitDoneAmsNetId: BOOL;
(*+++++ CoE Read +++++*)
	fbCoeReadNew: FB_EcCoESdoRead;
	astCoeRead: ARRAY[1..CnMaxIdxRead] OF ST_CoeReadData;
	nIdxRead: UINT;
	nStepRead: UINT;
	nDummyData: UDINT;
	bCoeReadBusy: BOOL;
	fbRTrig_CoeUpdate: R_TRIG;
	bButtonWriteCoeParameters: BOOL;
	bStartRead: BOOL :=TRUE;
	fbRTrig_StartRead: R_TRIG;
	bBusyRead: BOOL;
	bErrorRead: BOOL;
	nReadErrorId: UDINT;
(*+++++ CoE Reset+++++ *)
	fbCoeReset: FB_EcCoESdoWrite;
	nDummyReset: DWORD:= 16#64616F6C;
	fbRTrig_CoeDefault: R_TRIG;
	bButtonSetCoeParametersToDefault: BOOL;
	nStepReset: UDINT;
	bBusyReset: BOOL;
	bErrorReset: BOOL;
	nResetErrorId: UDINT;
(*+++++ CoE Write +++++*)
	fbCoeWriteNew: FB_EcCoESdoWrite;
	astCoeWrite: ARRAY[1..CnMaxIdxWrite] OF ST_CoeWriteData;
	nIdxWrite: UINT;
	nStepWrite: UINT;
	dwDummyDataWrite: DWORD;
	bCoeWriteBusy:BOOL;
	fbRTrig_CoeWrite: R_TRIG;
	bButtonReadCoeParameters: BOOL;
	stCoe: ST_CoeInfo;
	bBusyWrite: BOOL;
	bErrorWrite: BOOL;
	nWriteErrorId: UDINT;
(*+++++ Converted Variables +++++*)
	dwEnableUserScaleConv: DWORD;
	dwEnableUserScaleConvIndex8010: DWORD;
	udiEnableUserScaleConv: UDINT;
	udiEnableUserScaleConvIndex8010: UDINT;
(*+++++ Variables to show some parameters in the visu +++++*)
	sFilterSettings: STRING;
	sStatus: STRING;
	dwWriteColour: DWORD:= 16#00F0F0F0;
(*+++++ Error +++++*)
	bCoeError: BOOL;
(*+++++ Colours +++++*)
	dwUserScaleRead: DWORD;
	dwUserScaleWrite: DWORD;
	dwUserScaleOffsetRead: DWORD:= 16#00C0C0C0;
	dwUserScaleOffsetWrite: DWORD:= 16#00C0C0C0;
	dwUserScaleGainRead: DWORD:= 16#00C0C0C0;
	dwUserScaleGainWrite: DWORD:= 16#00C0C0C0;
	dwFilterRead: DWORD;
	dwFilterWrite: DWORD;
	dwUserScaleReadIndex8010: DWORD;
	dwUserScaleWriteIndex8010: DWORD;
	dwUserScaleOffsetReadIndex8010: DWORD:= 16#00C0C0C0;
	dwUserScaleOffsetWriteIndex8010: DWORD:= 16#00C0C0C0;
	dwUserScaleGainReadIndex8010: DWORD:= 16#00C0C0C0;
	dwUserScaleGainWriteIndex8010: DWORD:= 16#00C0C0C0;
	dwStatusCoeAccess: DWORD;
	dwCoEErrorTextRead: DWORD;
	dwCoEErrorTextWrite: DWORD;
	dwCoEErrorTextReset: DWORD;
(*+++++ Instances of FB_CoE_ParameterColours +++++*)
	fbCoEParameterColoursUserScaleOffset: FB_ColourCheck;
	fbCoEParameterColoursUserScaleGain: FB_ColourCheck;
	fbCoEParameterColoursFilter: FB_ColourCheck;
	fbCoEParameterColoursUserScaleOffsetIndex8010: FB_ColourCheck;
	fbCoEParameterColoursUserScaleGainIndex8010: FB_ColourCheck;

(*+++++ Miscellaneous +++++*)
	fbBlinker: FB_Blinker;
	sAdsErrorTextRead: STRING(255);
	sAdsErrorTextWrite: STRING(255);
	sAdsErrorTextReset: STRING(255);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[a_Init_AmsNetId();
a_Init_Read();
a_Init_Write();

(*Assigning String Values to the possbile inputs of the Subindex 'Filter settings' that can be made in the visu.
Pleas note that the Parameter 'Filter Settings' of Index 8000:15 also applys to Index 8010:15. *)
CASE astCoeRead[4].nData OF
	0:	sFilterSettings := '50 Hz';
	1:	sFilterSettings := '60 Hz';
	2:	sFilterSettings := '100 Hz';
	3:	sFilterSettings := '500 Hz';
	4:	sFilterSettings := '1 kHz';
	5:	sFilterSettings := '2 kHz';
	6:	sFilterSettings := '3.75 kHz';
	7:	sFilterSettings := '7.5 kHz';
	8:	sFilterSettings := '15 kHz';
	9:	sFilterSettings := '30 kHz';
	10:	sFilterSettings := '5 Hz';
	11:	sFilterSettings := '10 Hz';
END_CASE

(*++++++++++++++++++++++++++++++ CoE Default ++++++++++++++++++++++++++++++*)
(*Button 'Default CoE'*)
fbRTrig_CoeDefault(CLK:= bButtonSetCoeParametersToDefault , Q=>);
(*Pushing Button 'Default CoE' resets all CoEs*)
CASE nStepReset OF
	0:	(*Idle*)
		fbCoeReset.bExecute:= FALSE;
		IF fbRTrig_CoeDefault.Q AND NOT bCoeBusy THEN
			nStepReset:= 10;
		END_IF
	10:	IF NOT fbCoeReset.bBusy THEN
			IF NOT fbCoeReset.bError THEN
				fbCoeReset.bExecute:= TRUE;
				stCoe.bEnableUserScale:= 0;
				stCoe.diUserScaleOffset:= 0;
				stCoe.diUserScaleGain:= 65536;
				stCoe.dwFilterSettings:= 0;
				stCoe.bEnableUserScaleIndex8010:= 0;
				stCoe.diUserScaleOffsetIndex8010:= 0;
				stCoe.diUserScaleGainIndex8010:= 65536;
				nStepReset:= 0;
				bStartRead:= TRUE;				(*After a Reset of the Parameters, they are automatically read so that they are shown correctly in the visu*)
			END_IF
		END_IF
	ELSE
		nStepReset:= 0;
END_CASE

fbRTrig_StartRead(CLK:=bStartRead , Q=> );

(*++++++++++++++++++++++++++++++ CoE Read +++++++++++++++++++++++++++++*)
(*Button 'Read CoE'*)
fbRTrig_CoeUpdate(CLK:=bButtonReadCoeParameters , Q=> );
CASE nStepRead OF
	0:	(*Idle*)
		nDummyData:= 0;
		fbCoeReadNew.bExecute:= FALSE;
		bCoeReadBusy:= FALSE;
		IF fbRTrig_CoeUpdate.Q OR fbRTrig_StartRead.Q  THEN
			nIdxRead:= 0;
			nStepRead:= 10;
			bCoeReadBusy:= TRUE;
		END_IF
	10:	(*Start*)
		bStartRead:= FALSE;
		nDummyData:= 0;
		nIdxRead:= nIdxRead + 1;
		fbCoeReadNew.nIndex:= astCoeRead[nIdxRead].wIdx;
		fbCoeReadNew.nSubIndex := astCoeRead[nIdxRead].bySubIdx;
		fbCoeReadNew.bExecute:= TRUE;
		nStepRead:= 20;
	20:	(*Wait*)
		IF fbCoeReadNew.bBusy THEN
			fbCoeReadNew.bExecute:= FALSE;
			nStepRead:= 30;
		END_IF
	30:	(*Read*)
		IF NOT fbCoeReadNew.bBusy THEN
			IF NOT fbCoeReadNew.bError THEN
				astCoeRead[nIdxRead].nData:= nDummyData;
				astCoeRead[nIdxRead].bReadOK:= TRUE;
				astCoeRead[nIdxRead].nSize:= fbCoeReadNew.fbAdsReadEx.COUNT_R;
			ELSE
				astCoeRead[nIdxRead].bReadOK:= FALSE;
				astCoeRead[nIdxRead].nData:= 0;
				astCoeRead[nIdxRead].nSize:= 0;
			END_IF
			IF (nIdxRead= CnMaxIdxRead) THEN
				nStepRead:= 0;
			ELSE
				nStepRead:= 10;
			END_IF
		END_IF
	ELSE
		nStepRead:= 0;
END_CASE

(*++++++++++++++++++++++++++ CoE Write ++++++++++++++++++++++++++++++*)
(*Button Write CoE*)
fbRTrig_CoeWrite(CLK:= bButtonWriteCoeParameters , Q=> );
CASE nStepWrite OF
	0:	(*Idle*)
		dwDummyDataWrite:= 0;
		fbCoeWriteNew.bExecute:= FALSE;
		bCoeWriteBusy := FALSE;
		IF fbRTrig_CoeWrite.Q THEN
			nStepWrite:= 10;
			bCoeWriteBusy := TRUE;
		END_IF
	10: 	(*Start*)
				a_Init_BufLen();
		IF nIdxWrite= 7 THEN
			nIdxWrite:= 0;
		END_IF
		nIdxWrite:= nIdxWrite + 1;
		fbCoeWriteNew.nIndex:= astCoeWrite[nIdxWrite].wIdx;
		fbCoeWriteNew.nSubIndex:= astCoeWrite[nIdxWrite].bySubIdx;
		fbCoeWriteNew.bExecute:= TRUE;
		nStepWrite:= 20;
	20: 	(*Wait*)
		IF fbCoeWriteNew.bBusy THEN
			fbCoeWriteNew.bExecute:= FALSE;
			nStepWrite:= 30;
		END_IF
	30: (*Write*)
		IF NOT fbCoeWriteNew.bBusy THEN
			IF NOT fbCoeWriteNew.bError THEN
				astCoeWrite[nIdxWrite].bWriteOK:= TRUE;
				(*The BOOL_TO_DWORD conversions are needed because some Buttons in the visu need to be linked to a variable of the type BOOL so that they can be toggled.
				Those BOOL variables need to be converted to the type DWORD so that they can be written into the array astCoeWrite.nSize. nSize is a variable of the type DWORD. *)
				CASE nIdxWrite OF
				1:	dwEnableUserScaleConv:= BOOL_TO_DWORD(stCoe.bEnableUserScale);
					astCoeWrite[nIdxWrite].nData:= dwEnableUserScaleConv;
				2:	astCoeWrite[nIdxWrite].nData:= DINT_TO_DWORD(stCoe.diUserScaleOffset);
				3:	astCoeWrite[nIdxWrite].nData:= DINT_TO_DWORD(stCoe.diUserScaleGain);
				4:	astCoeWrite[nIdxWrite].nData:= stCoe.dwFilterSettings;
				5:	dwEnableUserScaleConvIndex8010:= BOOL_TO_DWORD(stCoe.bEnableUserScaleIndex8010);
					astCoeWrite[nIdxWrite].nData:= dwEnableUserScaleConvIndex8010;
				6:	astCoeWrite[nIdxWrite].nData:= DINT_TO_DWORD(stCoe.diUserScaleOffsetIndex8010);
				7:	astCoeWrite[nIdxWrite].nData:= DINT_TO_DWORD(stCoe.diUserScaleGainIndex8010);
				END_CASE
				dwDummyDataWrite:= astCoeWrite[nIdxWrite].nData;
				fbCoeWriteNew.bExecute:= TRUE;
			END_IF
			IF (nIdxWrite= CnMaxIdxWrite) THEN
				bStartRead:= TRUE;
				nStepWrite:= 0;
			ELSE
				nStepWrite:= 10;
			END_IF
		END_IF
	ELSE
		nStepWrite:= 0;
END_CASE

fbCoeReadNew( 	sNetId:= sAdsAddr ,
				nSlaveAddr:= AdsAddr.port ,
				nSubIndex:=,
				nIndex:= ,
				pDstBuf:= ADR( nDummyData ),
				cbBufLen:=SIZEOF(nDummyData ),
				bExecute:= ,
				tTimeout:=  t#2s,
				bBusy=>bBusyReset ,
				bError=>bErrorReset ,
				nErrId=>nReadErrorId );

(*This Function returns the ADS Error Text *)
sAdsErrorTextRead:= F_AdsError_Text (nCode:= nReadErrorId);
IF nReadErrorId= 0 THEN
	dwCoeErrorTextRead:= 16#0000FF00;
ELSE
	dwCoeErrorTextRead:= 16#000000FF;
END_IF

fbCoeWriteNew( 	sNetId:= sAdsAddr ,
				nSlaveAddr:= AdsAddr.port ,
				nSubIndex:=,
				nIndex:=,
				pSrcBuf:= ADR( dwDummyDataWrite ),
				cbBufLen:= astCoeWrite[nIdxWrite].nSize,
				bExecute:= ,
				tTimeout:=  t#2s,
				bBusy=>bBusyWrite ,
				bError=> bErrorWrite,
				nErrId=>nWriteErrorId );

(*This Function returns the ADS Error Text *)
sAdsErrorTextWrite:= F_AdsError_Text (nCode:= nWriteErrorId);
IF nWriteErrorId= 0 THEN
	dwCoeErrorTextWrite:= 16#0000FF00;
ELSE
	dwCoeErrorTextWrite:= 16#000000FF;
END_IF

fbCoeReset( 		sNetId:= sAdsAddr ,
				nSlaveAddr:= AdsAddr.port ,
				nSubIndex:= 16#01,
				nIndex:= 16#1011,
				pSrcBuf:= ADR( nDummyReset ),		(*Resetting all CoEs happens when CoE Index 16#1011, Subindex 16#01 is given the value 16#64616F6C*)
				cbBufLen:=SIZEOF( nDummyReset ),
				bExecute:= ,
				tTimeout:=  t#2s,
				bBusy=> bBusyRead ,
				bError=> bErrorRead,
				nErrId=> nResetErrorId);

(*This Function returns the ADS Error Text *)
sAdsErrorTextReset:= F_AdsError_Text (nCode:= nResetErrorId);
IF nResetErrorId= 0 THEN
	dwCoEErrorTextReset:= 16#0000FF00;
ELSE
	dwCoeErrorTextReset:= 16#000000FF;
END_IF

(*++++++++++++++++++++++++++++++ Status Strings ++++++++++++++++++++++++++++++*)
IF bCoeWriteBusy THEN
	sStatus:= 'CoE Parameters are written';
ELSIF bCoeReadBusy THEN
	sStatus:= 'CoE Parameters are being read';
ELSIF bBusyReset THEN
	sStatus:= 'CoE Parameters are set to default';
ELSE
	sStatus:= 'Idling';
END_IF

(*++++++++++++++++++++++++++++++ Noticing a changed value that has not yet been written ++++++++++++++++++++++++++++++*)

(*It is checked if the current read CoE value "Enable User Scale" equals the value that is typed in.
If the values are not equal, the buttons get a different background colour *)
udiEnableUserScaleConv:= BOOL_TO_UDINT(stCoe.bEnableUserScale);
udiEnableUserScaleConvIndex8010:= BOOL_TO_UDINT(stCoe.bEnableUserScaleIndex8010);

IF udiEnableUserScaleConv= 0 AND astCoeRead[1].nData= 0 THEN
	dwUserScaleRead:= 16#00C0C0C0;
	dwUserScaleWrite:= 16#00F0F0F0;
ELSIF udiEnableUserScaleConv =1 AND astCoeRead[1].nData= 0 THEN
	dwUserScaleRead:= 16#00C0C0C0;
	dwUserScaleWrite:= 16#00FF0000;
ELSIF udiEnableUserScaleConv =1 AND astCoeRead[1].nData=1  THEN
	dwUserScaleRead:= 16#0000FF00;
	dwUserScaleWrite:= 16#00F0F0F0;
ELSIF udiEnableUserScaleConv =0 AND astCoeRead[1].nData= 1 THEN
	dwUserScaleRead:= 16#0000FF00;
	dwUserScaleWrite:= 16#00FF0000;
END_IF

IF udiEnableUserScaleConvIndex8010= 0 AND astCoeRead[5].nData= 0 THEN
	dwUserScaleReadIndex8010:= 16#00C0C0C0;
	dwUserScaleWriteIndex8010:= 16#00F0F0F0;
ELSIF udiEnableUserScaleConvIndex8010 =1 AND astCoeRead[5].nData= 0 THEN
	dwUserScaleReadIndex8010:= 16#00C0C0C0;
	dwUserScaleWriteIndex8010:= 16#00FF0000;
ELSIF udiEnableUserScaleConvIndex8010 =1 AND astCoeRead[5].nData=1  THEN
	dwUserScaleReadIndex8010:= 16#0000FF00;
	dwUserScaleWriteIndex8010:= 16#00F0F0F0;
ELSIF udiEnableUserScaleConvIndex8010 =0 AND astCoeRead[5].nData= 1 THEN
	dwUserScaleReadIndex8010:= 16#0000FF00;
	dwUserScaleWriteIndex8010:= 16#00FF0000;
END_IF

(*The Function Block FB_ColourCheck checks if the current read CoE values equal the values that are typed in.
If the values are not equal, the "Write Value" box gets a blue background *)
fbCoEParameterColoursFilter(udiCoe:= stCoe.dwFilterSettings, udiData:= astCoeRead[4].nData, dwColourRead=> dwFilterRead, dwColourWrite=> dwFilterWrite);

(*If User Scale is disabled, the shapes in the visualization for Offset and Gain stay grey*)
IF astCoeRead[1].nData= 1 THEN
	fbCoEParameterColoursUserScaleOffset(udiCoe:= DINT_TO_UDINT(stCoe.diUserScaleOffset), udiData:= astCoeRead[2].nData, dwColourRead=> dwUserScaleOffsetRead, dwColourWrite=> dwUserScaleOffsetWrite);
	fbCoEParameterColoursUserScaleGain(udiCoe:= DINT_TO_UDINT(stCoe.diUserScaleGain), udiData:= astCoeRead[3].nData, dwColourRead=> dwUserScaleGainRead, dwColourWrite=> dwUserScaleGainWrite);
ELSE
	dwUserScaleOffsetRead:= 16#00C0C0C0;
	dwUserScaleOffsetWrite:= 16#00C0C0C0;
	dwUserScaleGainRead:= 16#00C0C0C0;
	dwUserScaleGainWrite:= 16#00C0C0C0;
END_IF
IF astCoeRead[5].nData= 1 THEN
fbCoEParameterColoursUserScaleOffsetIndex8010(udiCoe:= DINT_TO_UDINT(stCoe.diUserScaleOffsetIndex8010), udiData:= astCoeRead[6].nData, dwColourRead=> dwUserScaleOffsetReadIndex8010, dwColourWrite=> dwUserScaleOffsetWriteIndex8010);
fbCoEParameterColoursUserScaleGainIndex8010(udiCoe:= DINT_TO_UDINT(stCoe.diUserScaleGainIndex8010), udiData:= astCoeRead[7].nData, dwColourRead=> dwUserScaleGainReadIndex8010, dwColourWrite=> dwUserScaleGainWriteIndex8010);
ELSE
	dwUserScaleOffsetReadIndex8010:= 16#00C0C0C0;
	dwUserScaleOffsetWriteIndex8010:= 16#00C0C0C0;
	dwUserScaleGainReadIndex8010:= 16#00C0C0C0;
	dwUserScaleGainWriteIndex8010:= 16#00C0C0C0;
END_IF

(*If any of the variables that can be written in the visu are changed and have not yet been written, the Button 'Write CoE' flashes blue*)
IF  udiEnableUserScaleConv= astCoeRead[1].nData
	AND (stCoe.diUserScaleOffset= UDINT_TO_DINT(astCoeRead[2].nData))
	AND stCoe.diUserScaleGain= UDINT_TO_DINT(astCoeRead[3].nData)
	AND stCoe.dwFilterSettings= astCoeRead[4].nData
	AND udiEnableUserScaleConvIndex8010= astCoeRead[5].nData
	AND  stCoe.diUserScaleOffsetIndex8010= UDINT_TO_DINT(astCoeRead[6].nData)
	AND stCoe.diUserScaleGainIndex8010= UDINT_TO_DINT(astCoeRead[7].nData)
THEN
	dwWriteColour:= 16#00F0F0F0;
ELSE
	IF bBlinker THEN
		dwWriteColour:= 16#00FF0000;
	ELSE
		dwWriteColour:= 16#00F0F0F0;
	END_IF
END_IF

(*Error/Busy*)
IF bErrorRead OR bErrorWrite OR bErrorReset THEN
	bCoeError:= TRUE;
ELSE
	bCoeError:= FALSE;
END_IF

IF bBusyRead OR bBusyWrite OR bBusyReset THEN
	bCoeBusy:= TRUE;
ELSE
	bCoeBusy:= FALSE;
END_IF


fbBlinker (tBlinkTime:= t#1000ms, bBlink=> bBlinker );

(*General Status for this Function Block*)
IF NOT bErrorRead AND NOT bErrorWrite AND NOT bErrorReset THEN
	bCoeAccessOK:= TRUE;
	dwStatusCoeAccess:= 16#0000FF00;
	sStatusCoeAccess:= 'Coe Access: No Error.';
ELSE
	bCoeAccessOK:= FALSE;
	dwStatusCoeAccess:= 16#000000FF;
	IF bErrorRead THEN
		sStatusCoeAccess:= 'fbCoERead Error. ';
	ELSE
		sStatusCoeAccess:= '';
	END_IF
	IF bErrorWrite THEN
		sStatusCoeAccess:= CONCAT(sStatusCoeAccess, 'fbCoEWrite Error. ');
	ELSE
		sStatusCoeAccess:= CONCAT(sStatusCoeAccess, '');
	END_IF
	IF bErrorReset THEN
		sStatusCoeAccess:= CONCAT(sStatusCoeAccess, 'fbCoEReset Error. ');
	ELSE
		sStatusCoeAccess:= CONCAT(sStatusCoeAccess, '');
	END_IF
END_IF]]></ST>
    </Implementation>
    <Action Name="a_Init_AmsNetId" Id="{bda1b856-4380-4f15-90c3-e5d8c7abc9a3}">
      <Implementation>
        <ST><![CDATA[(* Generate ADS Address string from ADS Address Datatype *)
IF NOT bInitDoneAmsNetId THEN
	bInitDoneAmsNetId:= TRUE;
	sAdsAddr:= F_CreateAmsNetId(AdsAddr.netId);
END_IF


;]]></ST>
      </Implementation>
    </Action>
    <Action Name="a_Init_BufLen" Id="{d6dc672d-6ef3-44e2-985e-eb5f44d6656b}">
      <Implementation>
        <ST><![CDATA[IF NOT bInitDoneBufLen THEN
	bInitDoneBufLen:= TRUE;

	nIdxWrite:= 1;
	astCoeWrite[nIdxWrite].nSize:= astCoeRead[1].nSize;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].nSize:= astCoeRead[2].nSize;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].nSize:= astCoeRead[3].nSize;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].nSize:= astCoeRead[4].nSize;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].nSize:= astCoeRead[5].nSize;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].nSize:= astCoeRead[6].nSize;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].nSize:= astCoeRead[7].nSize;

	nIdxWrite:= 0;

END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="a_Init_Read" Id="{d42b509b-9660-46d8-8b02-43b5638e3707}">
      <Implementation>
        <ST><![CDATA[IF NOT bInitDoneRead THEN
	bInitDoneRead := TRUE;

	nIdxRead:= 1;
	astCoeRead[nIdxRead].wIdx:= 16#8000;
	astCoeRead[nIdxRead].bySubIdx:= 16#01;

	nIdxRead:= nIdxRead + 1;
	astCoeRead[nIdxRead].wIdx:= 16#8000;
	astCoeRead[nIdxRead].bySubIdx:= 16#11;

	nIdxRead:= nIdxRead + 1;
	astCoeRead[nIdxRead].wIdx:= 16#8000;
	astCoeRead[nIdxRead].bySubIdx:= 16#12;

	nIdxRead:= nIdxRead + 1;
	astCoeRead[nIdxRead].wIdx:= 16#8000;
	astCoeRead[nIdxRead].bySubIdx:= 16#15;

(*+++++ Index 8010 +++++*)
	nIdxRead:= nIdxRead +1;
	astCoeRead[nIdxRead].wIdx:= 16#8010;
	astCoeRead[nIdxRead].bySubIdx:= 16#01;

	nIdxRead:= nIdxRead + 1;
	astCoeRead[nIdxRead].wIdx:= 16#8010;
	astCoeRead[nIdxRead].bySubIdx:= 16#11;

	nIdxRead:= nIdxRead + 1;
	astCoeRead[nIdxRead].wIdx:= 16#8010;
	astCoeRead[nIdxRead].bySubIdx:= 16#12;

END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="a_Init_Write" Id="{e13fbf18-60a0-43de-ad41-a5eefd1056f3}">
      <Implementation>
        <ST><![CDATA[IF NOT bInitDoneWrite THEN
	bInitDoneWrite:= TRUE;

	nIdxWrite:= 1;
	astCoeWrite[nIdxWrite].wIdx:= 16#8000;
	astCoeWrite[nIdxWrite].bySubIdx:= 16#01;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].wIdx:= 16#8000;
	astCoeWrite[nIdxWrite].bySubIdx:= 16#11;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].wIdx:= 16#8000;
	astCoeWrite[nIdxWrite].bySubIdx:= 16#12;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].wIdx:= 16#8000;
	astCoeWrite[nIdxWrite].bySubIdx:= 16#15;

(*+++++ Index 8010 +++++*)
	nIdxWrite:= nIdxWrite +1;
	astCoeWrite[nIdxWrite].wIdx:= 16#8010;
	astCoeWrite[nIdxWrite].bySubIdx:= 16#01;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].wIdx:= 16#8010;
	astCoeWrite[nIdxWrite].bySubIdx:= 16#11;

	nIdxWrite:= nIdxWrite + 1;
	astCoeWrite[nIdxWrite].wIdx:= 16#8010;
	astCoeWrite[nIdxWrite].bySubIdx:= 16#12;

END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_EL3351_CoE">
      <LineId Id="108" Count="343" />
    </LineIds>
    <LineIds Name="FB_EL3351_CoE.a_Init_AmsNetId">
      <LineId Id="0" Count="7" />
    </LineIds>
    <LineIds Name="FB_EL3351_CoE.a_Init_BufLen">
      <LineId Id="0" Count="26" />
    </LineIds>
    <LineIds Name="FB_EL3351_CoE.a_Init_Read">
      <LineId Id="0" Count="32" />
    </LineIds>
    <LineIds Name="FB_EL3351_CoE.a_Init_Write">
      <LineId Id="0" Count="32" />
    </LineIds>
  </POU>
</TcPlcObject>
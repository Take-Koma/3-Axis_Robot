<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="P_Safety" Id="{860b1fb0-7ebe-4c1e-b9e0-1f1cdd4578cc}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Safety
VAR
	i								:INT;	
	bAxisMove						:BOOL;												//いずれかの軸が動いていることの結果
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[	//---セーフティーをランする,セフティーがランしたかもチェック---
	GVL_Safety.bSafetyRun_Stop:=TRUE;
	
	IF GVL_Safety.bSafetyRun_Stop=TRUE AND GVL_Safety.bSafetyInRun=FALSE THEN
		GVL.stAlarm[E_AlarmList.SafetyNotRun].bFlag:=TRUE;
		GVL.stAlarm[E_AlarmList.SafetyNotRun].eMachineStateSet:=E_MachineState.Emergency;
	ELSE
		GVL.stAlarm[E_AlarmList.SafetyNotRun].bFlag:=FALSE;
		GVL.stAlarm[E_AlarmList.SafetyNotRun].eMachineStateSet:=E_MachineState.Base;
	END_IF;
	
	//---セーフティーのファンクションブロック動作確認---
	IF GVL_Safety.bFBEstopError=TRUE OR GVL_Safety.bFBEdmError=TRUE THEN
		GVL.stAlarm[E_AlarmList.SafetyFbError].bFlag:=TRUE;
		GVL.stAlarm[E_AlarmList.SafetyFbError].eMachineStateSet:=E_MachineState.Emergency;
	ELSE
		GVL.stAlarm[E_AlarmList.SafetyFbError].bFlag:=FALSE;
		GVL.stAlarm[E_AlarmList.SafetyFbError].eMachineStateSet:=E_MachineState.Base;
	END_IF
	
	//---非常停止の電源ONを反転してセーフティーのEDMへ---
	GVL_Safety.bFBEStopEDM:= NOT GVL_Safety.bFBEstopOutput;

	//---非常停止ボタンの制御---
	IF GVL_Safety.bFBEStopInput1=FALSE AND GVL_Safety.bFBEStopInput2=FALSE AND GVL_Safety.bFBEstopOutput=FALSE THEN
		GVL.stAlarm[E_AlarmList.EmergencyStop].bFlag:=TRUE;
		GVL.stAlarm[E_AlarmList.EmergencyStop].eMachineStateSet:=E_MachineState.Emergency;
	ELSIF GVL_Safety.bFBEStopInput1=TRUE AND GVL_Safety.bFBEStopInput2=TRUE AND GVL_Safety.bFBEstopOutput=TRUE THEN
		GVL.stAlarm[E_AlarmList.EmergencyStop].bFlag:=FALSE;
		GVL.stAlarm[E_AlarmList.EmergencyStop].eMachineStateSet:=E_MachineState.Base;
	END_IF;
	
	//---GOTからの非常停止リセットをセーフティーへ---
	GVL_Safety.bFBEStopReset:=GVL_MitsubishiCom.bFromSafetyReset;
	
	//---GOTからの非常停止リセットでセフティーエラーもリセットする---
	GVL_Safety.bSafetyErrAck:=GVL_MitsubishiCom.bFromSafetyReset;

	//---各軸のステータスを読み込む---
	GVL.stAxis[E_Axis.X_Axis].ReadStatus();
	GVL.stAxis[E_Axis.Y_Axis].ReadStatus();
	GVL.stAxis[E_Axis.Z_Axis].ReadStatus();
	GVL.stAxis[E_Axis.Gripper].ReadStatus();
	
	//---各軸が動いているかをまとめる---
	bAxisMove:= GVL.stAxis[E_Axis.X_Axis].Status.Moving OR GVL.stAxis[E_Axis.Y_Axis].Status.Moving OR GVL.stAxis[E_Axis.Z_Axis].Status.Moving OR GVL.stAxis[E_Axis.Gripper].Status.Moving;
	
	//---軸が動いているときにキースイッチ開でグリップスイッチが押されてなかったら、マシンステートをワーニングにしてブザーを鳴らす、また各軸停止---
	IF bAxisMove=TRUE AND_THEN GVL_Safety.bGripSwich=FALSE AND GVL_MitsubishiCom.bFromKeySwitchClose=FALSE THEN
		GVL.stAlarm[E_AlarmList.GripSwichNotOn].bFlag:=TRUE;
		GVL.stAlarm[E_AlarmList.GripSwichNotOn].eMachineStateSet:=E_MachineState.Warning;
		GVL.bStop:=TRUE;
	ELSIF GVL_MitsubishiCom.bFromAlarmReset=TRUE THEN
		GVL.stAlarm[E_AlarmList.GripSwichNotOn].bFlag:=FALSE;
		GVL.stAlarm[E_AlarmList.GripSwichNotOn].eMachineStateSet:=E_MachineState.Base;
		GVL.bStop:=FALSE;
	END_IF
	
	//各軸が動いていたら、マシンステートをムービングへ
	IF bAxisMove=TRUE THEN
		GVL.eMachineState:=E_MachineState.Moving;
	ELSIF GVL.bPower=TRUE THEN
		GVL.eMachineState:=E_MachineState.Stop;
	ELSIF GVL.bPower=FALSE THEN
		GVL.eMachineState:=E_MachineState.Stay;
	END_IF
	
	]]></ST>
    </Implementation>
    <LineIds Name="P_Safety">
      <LineId Id="845" Count="10" />
      <LineId Id="921" Count="0" />
      <LineId Id="917" Count="0" />
      <LineId Id="922" Count="3" />
      <LineId Id="919" Count="1" />
      <LineId Id="918" Count="0" />
      <LineId Id="856" Count="13" />
      <LineId Id="926" Count="0" />
      <LineId Id="928" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="870" Count="7" />
      <LineId Id="915" Count="0" />
      <LineId Id="890" Count="20" />
      <LineId Id="678" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>